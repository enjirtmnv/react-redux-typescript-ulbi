{"version":3,"sources":["types/user.ts","hooks/useTypedSelector.ts","types/todo.ts","store/action-creators/user.ts","store/action-creators/todo.ts","store/action-creators/index.ts","hooks/useActions.ts","components/UserList.tsx","components/TodoList.tsx","App.tsx","store/reducers/userReducer.ts","store/reducers/todoReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","useTypedSelector","useSelector","TodoActionsTypes","fetchUsers","dispatch","a","type","FETCH_USERS","axios","get","response","setTimeout","FETCH_USERS_SUCCESS","payload","data","FETCH_USERS_ERROR","fetchTodos","page","limit","FETCH_TODOS","params","_page","_limit","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROS","setTodoPage","FETCH_TODO_PAGE","TodoActionCreators","UserActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","UserList","state","user","users","error","loading","useEffect","map","name","id","TodoList","todo","todos","title","style","display","p","onClick","border","padding","App","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b35f224f.chunk.js","sourcesContent":["export interface UserState {\n    users: any[];\n    loading: boolean;\n    error: null | string;\n}\n\nexport enum UserActionTypes {\n    FETCH_USERS = \"FETCH_USERS\",\n    FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\",\n    FETCH_USERS_ERROR = \"FETCH_USERS_ERROR\",\n}\n\ninterface FetchUsersAction {\n    type: UserActionTypes.FETCH_USERS;\n}\n\ninterface FetchUsersSuccessAction {\n    type: UserActionTypes.FETCH_USERS_SUCCESS;\n    payload : any[]\n}\n\ninterface FetchUsersErrorAction {\n    type: UserActionTypes.FETCH_USERS_ERROR;\n    payload: string\n}\n\nexport type UserAction = FetchUsersAction | FetchUsersSuccessAction | FetchUsersErrorAction;\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {RootState} from \"../store/reducers\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","export interface TodoState {\n    todos: any[],\n    loading: boolean,\n    error: null | string,\n    page: number,\n    limit: number,\n}\n\nexport enum TodoActionsTypes {\n    FETCH_TODOS = 'FETCH_TODOS',\n    FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS',\n    FETCH_TODOS_ERROS = 'FETCH_TODOS_ERROS',\n    FETCH_TODO_PAGE = 'FETCH_TODO_PAGE', //изменение текущей страницы\n}\n\ninterface FetchTodoAction {\n    type: TodoActionsTypes.FETCH_TODOS,\n}\n\ninterface FetchTodoSuccessAction {\n    type: TodoActionsTypes.FETCH_TODOS_SUCCESS;\n    payload: any[],\n}\n\ninterface FetchTodoErrorAction {\n    type: TodoActionsTypes.FETCH_TODOS_ERROS;\n    payload: string,\n}\n\ninterface SetTodoPage {\n    type: TodoActionsTypes.FETCH_TODO_PAGE;\n    payload: number,\n}\n\nexport type TodoAction =\n    FetchTodoAction\n    | FetchTodoSuccessAction\n    | FetchTodoErrorAction\n    | SetTodoPage","import {UserAction, UserActionTypes} from \"../../types/user\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\n\nexport const fetchUsers = () => {\n    return async (dispatch: Dispatch<UserAction>) => {\n        try {\n            dispatch( {type: UserActionTypes.FETCH_USERS} );\n            const response = await axios.get('https://jsonplaceholder.typicode.com/users');\n            setTimeout(() => {\n                dispatch( {type: UserActionTypes.FETCH_USERS_SUCCESS, payload: response.data} )\n            }, 1000 );\n        } catch (e) {\n            dispatch( {\n                type: UserActionTypes.FETCH_USERS_ERROR,\n                payload: 'Произошла ошибка при загрузке пользователей'} )\n        }\n    }\n};","import {TodoAction, TodoActionsTypes} from \"../../types/todo\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\n\n\nexport const fetchTodos = (page = 1, limit = 10) => {\n    return async (dispatch: Dispatch<TodoAction>) => {\n        try {\n            dispatch({type: TodoActionsTypes.FETCH_TODOS});\n            const response = await axios.get('https://jsonplaceholder.typicode.com/todos', {\n                params: { _page: page, _limit: limit}\n            });\n            setTimeout( () => {\n                dispatch({ type: TodoActionsTypes.FETCH_TODOS_SUCCESS, payload: response.data })\n            }, 500 )\n\n        } catch(e) {\n            dispatch({\n                type: TodoActionsTypes.FETCH_TODOS_ERROS,\n                payload: 'Произошла ошибка при загрузке списка дел'\n            })\n        }\n    }\n};\n\nexport function setTodoPage(page: number): TodoAction{\n    return {type: TodoActionsTypes.FETCH_TODO_PAGE, payload: page}\n}","import * as UserActionCreators from './user'\nimport * as TodoActionCreators from './todo'\n\nexport default {\n    ...TodoActionCreators,\n    ...UserActionCreators\n}","import {useDispatch} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport ActionCreators from '../store/action-creators'\n\n\nexport const useActions = () => {\n    const dispatch = useDispatch();\n    // console.log(ActionCreators);\n    return bindActionCreators(ActionCreators, dispatch)\n};\n","import React, {useEffect} from 'react';\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchUsers} from \"../store/action-creators/user\";\nimport {useActions} from \"../hooks/useActions\";\n\nconst UserList: React.FC = () => {\n    const { users, error, loading } = useTypedSelector( state => state.user );\n    // const dispatch = useDispatch();\n    const { fetchUsers } = useActions();\n\n    useEffect( () => {\n        // dispatch(fetchUsers())\n        fetchUsers()\n    }, [] );\n\n    if (loading) {\n        return <h1>Идет загрузка...</h1>\n    }\n\n    if (error) {\n        return <h1>{error}</h1>\n    }\n\n    return (\n        <div>\n            {users.map(user =>\n                <div key={user.id}>{user.name}</div>\n            )}\n        </div>\n    );\n};\n\nexport default UserList;","import React, {useEffect} from 'react';\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {useActions} from \"../hooks/useActions\";\n\nconst TodoList: React.FC = () => {\n    const {page, error, loading, todos, limit} = useTypedSelector(state => state.todo);\n    const { fetchTodos, setTodoPage } = useActions();\n    const pages = [1, 2, 3, 4, 5];\n\n    useEffect(() => {\n        fetchTodos(page, limit)\n    }, [page]);\n\n    if (loading) {\n        return <h1>Идет загрузка...</h1>\n    }\n\n    if (error){\n        return <h1>{error}</h1>\n    }\n\n    return (\n        <div>\n            {todos.map(todo =>\n                <div key={todo.id}>{todo.id} - {todo.title}</div>\n            )}\n            <div style={{display: 'flex'}}>\n                {pages.map(p =>\n                    <div\n                        onClick = { () => setTodoPage(p) }\n                        style={{border: p === page? '15px solid blue': '10px solid pink', padding: 10}}>{p}</div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TodoList;","import React from 'react';\nimport UserList from './components/UserList';\nimport TodoList from './components/TodoList'\n\nfunction App() {\n    return (\n        <div>\n            <UserList/>\n            <hr/>\n            <TodoList/>\n        </div>\n    );\n}\n\nexport default App;\n","import {UserAction, UserActionTypes, UserState} from \"../../types/user\";\n\n\nconst initialState: UserState = {\n    users: [],\n    loading: false,\n    error: null,\n};\n\n\n//reducer принимает два параметра: состояние и action\nexport const userReducer = (state : UserState = initialState, action: UserAction): UserState => {\n    switch (action.type){\n        case UserActionTypes.FETCH_USERS:\n            return {users: [], loading: true, error: null};\n        case UserActionTypes.FETCH_USERS_SUCCESS:\n            return {users: action.payload, loading: false, error: null};\n        case UserActionTypes.FETCH_USERS_ERROR:\n            return {users: [], loading: false, error: action.payload};\n        default:\n            return state\n    }\n};","import {TodoAction, TodoActionsTypes, TodoState} from \"../../types/todo\";\n\nconst initialState = {\n    todos: [],\n    page: 1,\n    error: null,\n    limit: 10,\n    loading: false,\n};\n\n\nexport const todoReducer = (state : TodoState = initialState, action: TodoAction): TodoState => {\n    switch (action.type) {\n        case TodoActionsTypes.FETCH_TODOS:\n            return {...state, loading: true};\n        case TodoActionsTypes.FETCH_TODOS_SUCCESS:\n            return {...state, loading: false, todos: action.payload};\n        case TodoActionsTypes.FETCH_TODOS_ERROS:\n            return {...state, loading: false, error: action.payload};\n        case TodoActionsTypes.FETCH_TODO_PAGE:\n            return {...state, page: action.payload};\n        default:\n            return state\n\n    }\n};","import { combineReducers } from 'redux';\nimport { userReducer } from \"./userReducer\";\nimport {todoReducer} from \"./todoReducer\";\n\nexport const rootReducer = combineReducers({\n    user: userReducer,\n    todo: todoReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from \"./reducers\";\n\n\n// первымм парметром принимет reducer, вторым middleware\n// middleware передаются через функцию applyMiddleware()\n// thunk - middleware для асинхронных actions\n\nexport const store = createStore( rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { store } from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}